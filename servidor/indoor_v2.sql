-- MySQL Script generated by MySQL Workbench
-- Wed Sep  9 16:22:11 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

CREATE DATABASE IF NOT EXISTS `db_indoor`; 
USE `db_indoor`;

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Table `tb_dispositivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tb_dispositivo` (
  `id_dispositivo` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'identificador dispositivo',
  `no_dispositivo` VARCHAR(15) NOT NULL COMMENT '\'Descrição dispositivo\'',
  `no_localizacao` VARCHAR(45) NOT NULL COMMENT '\'Localização do dispositivo\'',
  `vl_min_luminosidade` INT NOT NULL COMMENT 'Valor mínimo Luminnosidade dispositivo',
  `vl_frequencia_captura` INT NOT NULL COMMENT 'Frequência de captura do dispositivo',
  `st_ativo` CHAR(1) NOT NULL DEFAULT 'A' COMMENT 'Status ativo ou inativo do dispositivo',
  PRIMARY KEY (`id_dispositivo`),
  UNIQUE INDEX `id_dispositivo_UNIQUE` (`id_dispositivo` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tb_ocorrencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tb_ocorrencia` (
  `id_ocorrencia` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador da ocorrência captura',
  `id_dispositivo` INT UNSIGNED NOT NULL COMMENT 'Identificador dispositivo',
  `vl_temperatura` DECIMAL(3,1) NOT NULL COMMENT 'Valor da temperatura capturada',
  `vl_luminosidade` INT NOT NULL COMMENT 'Valor da luminosiade capturada',
  `dt_ocorrencia` DATE NOT NULL COMMENT 'Data que houve a captura dos dados',
  `hr_ocorrencia` TIME NOT NULL COMMENT 'Hora da captura dos dados',
  `st_luminosidade` CHAR(1) NOT NULL COMMENT '\'Indica se o dispositivo está ligado ou desligado\'',
  PRIMARY KEY (`id_ocorrencia`),
  UNIQUE INDEX `id_ocorrencia_UNIQUE` (`id_ocorrencia` ASC),
  INDEX `fk_tb_ocorrencia_tb_dispositivo_idx` (`id_dispositivo` ASC),
  CONSTRAINT `fk_tb_ocorrencia_tb_dispositivo`
    FOREIGN KEY (`id_dispositivo`)
    REFERENCES `tb_dispositivo` (`id_dispositivo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tb_parametro`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tb_parametro` (
  `vl_intervalo_min` INT NOT NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tb_sumario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tb_sumario` (
  `id_dispositivo` INT NOT NULL COMMENT 'Identificador do dispositivo.',
  `dt_ocorrencia` DATE NOT NULL COMMENT 'Data em que houve a captura dos dados.',
  `hr_ocorrencia` TIME NOT NULL COMMENT 'Hora em que houve a captura dos dados.',
  `hr_diferenca_luminosidade` TIME NOT NULL COMMENT 'Intervalo de tempo entre uma catura e outra. ')
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `tb_estado_dispositivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tb_estado_dispositivo` (
  `id_estado_dispositivo` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador da ocorrência.',
  `id_dispositivo` INT UNSIGNED NOT NULL COMMENT 'Identificador do dispositivo.',
  `dt_ocorrencia` DATE NOT NULL COMMENT 'Data em que ocorreu a mudança de estado.',
  `hr_ocorrencia` TIME NOT NULL COMMENT 'Hora em que ocorreu a mudança de estado.',
  `st_estado` CHAR(1) NOT NULL COMMENT 'Estado de luminosidade podendo ser \'1 - Aceso\' ou \'0 - Apagado\'',
  PRIMARY KEY (`id_estado_dispositivo`),
  UNIQUE INDEX `id_estado_dispositivo_UNIQUE` (`id_estado_dispositivo`),
  INDEX `fk_tb_estado_dispositivo_tb_dispositivo1_idx` (`id_dispositivo` ASC),
  CONSTRAINT `fk_tb_estado_dispositivo_tb_dispositivo1`
    FOREIGN KEY (`id_dispositivo`)
    REFERENCES `tb_dispositivo` (`id_dispositivo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- View `vw_total_lum_disp2`
--
-- Esta view retorna tempo total de luminosidade
-- por dia para o dispositivo 2. 
-- -----------------------------------------------------
CREATE OR REPLACE VIEW vw_total_lum_disp2 AS SELECT dt_ocorrencia AS dia,
                                             HOUR(SEC_TO_TIME(SUM(TIME_TO_SEC(hr_diferenca_luminosidade)))) AS horas,
                                             MINUTE(SEC_TO_TIME(SUM(TIME_TO_SEC(hr_diferenca_luminosidade)))) AS minutos,
                                             SECOND(SEC_TO_TIME(SUM(TIME_TO_SEC(hr_diferenca_luminosidade)))) AS segundos,
                                             ROUND(SUM(TIME_TO_SEC(hr_diferenca_luminosidade))/3600,2) AS total_horas
                                             FROM tb_sumario
                                             WHERE id_dispositivo = 2
                                             GROUP BY dt_ocorrencia
                                             ORDER BY dt_ocorrencia;

-- -----------------------------------------------------
-- Trigger `trig_calcula_luminosidade`
--
-- Esta trigger calcula o tempo de luminosidade entre 
-- uma captura de dispositvo e outra, a cada inserção,
-- sendo que esta ocorrência deverá ter o seu status 
-- de luminosidade como valor 1. 
-- -----------------------------------------------------

DELIMITER $$

CREATE OR REPLACE TRIGGER trig_calcula_luminosidade
    BEFORE INSERT
    ON tb_ocorrencia FOR EACH ROW
BEGIN
    IF NEW.st_luminosidade = '1' THEN
        IF EXISTS (SELECT * FROM tb_ocorrencia
                WHERE id_dispositivo = NEW.id_dispositivo
                AND dt_ocorrencia = NEW.dt_ocorrencia
                AND st_luminosidade = '1') THEN

            SELECT id_ocorrencia,dt_ocorrencia,hr_ocorrencia,st_luminosidade
            INTO @id_ult_ocorrencia,@dt_ult_ocorrencia,@hr_ult_ocorrencia,@st_ult_luminosidade
            FROM tb_ocorrencia
            WHERE id_dispositivo = NEW.id_dispositivo
            AND dt_ocorrencia = NEW.dt_ocorrencia
            ORDER BY TIMESTAMP(dt_ocorrencia,hr_ocorrencia) DESC
            LIMIT 1;

            IF @st_ult_luminosidade = '1' THEN
                INSERT INTO tb_sumario(id_dispositivo,dt_ocorrencia,hr_ocorrencia,hr_diferenca_luminosidade)
                VALUES (NEW.id_dispositivo,NEW.dt_ocorrencia,NEW.hr_ocorrencia,TIMEDIFF(NEW.hr_ocorrencia,@hr_ult_ocorrencia));
            ELSE
                INSERT INTO tb_sumario(id_dispositivo,dt_ocorrencia,hr_ocorrencia,hr_diferenca_luminosidade)
                VALUES (NEW.id_dispositivo,NEW.dt_ocorrencia,NEW.hr_ocorrencia,TIME(STR_TO_DATE("00:00:00","%H:%i:%s")));
            END IF;
        ELSE
            INSERT INTO tb_sumario(id_dispositivo,dt_ocorrencia,hr_ocorrencia,hr_diferenca_luminosidade)
            VALUES (NEW.id_dispositivo,NEW.dt_ocorrencia,NEW.hr_ocorrencia,TIME(STR_TO_DATE("00:00:00","%H:%i:%s")));            
        END IF;
    END IF;
END$$

DELIMITER ; 

-- -----------------------------------------------------
-- Procedure `proc_calcula_luminosidade`
--
-- Esta procedure calcula o tempo de luminosidade entre 
-- uma captura de dispositvo e outra, para todas as ocorrências,
-- sendo que esta ocorrência deverá ter o seu status de luminosidade
-- como valor 1. 
-- -----------------------------------------------------

DELIMITER //

CREATE OR REPLACE PROCEDURE proc_calcula_luminosidade ()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE TMP NUMERIC(3,1);
	DECLARE IDO,IDD,LUM INT;
	DECLARE DAT DATE;
	DECLARE HRO TIME;
	DECLARE STS CHAR(1);
    DECLARE ocorrencias CURSOR FOR SELECT id_ocorrencia,
                                          id_dispositivo,
                                          vl_temperatura,
                                          vl_luminosidade,
                                          dt_ocorrencia,
                                          hr_ocorrencia,
                                          st_luminosidade
                                   FROM tb_ocorrencia ORDER BY id_ocorrencia ASC;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN ocorrencias;
    calc1: LOOP
        FETCH ocorrencias INTO IDO,IDD,TMP,LUM,DAT,HRO,STS;
        IF done THEN
            LEAVE calc1;
        END IF;

        IF STS = '1' THEN
            IF EXISTS (SELECT * FROM tb_ocorrencia
                    WHERE id_dispositivo = IDD
                    AND dt_ocorrencia = DAT
                    AND id_ocorrencia < IDO
                    AND st_luminosidade = '1') THEN

                SELECT id_ocorrencia,dt_ocorrencia,hr_ocorrencia,st_luminosidade
                INTO @id_ult_ocorrencia,@dt_ult_ocorrencia,@hr_ult_ocorrencia,@st_ult_luminosidade
                FROM tb_ocorrencia
                WHERE id_dispositivo = IDD
                AND dt_ocorrencia = DAT
                AND id_ocorrencia < IDO
                ORDER BY TIMESTAMP(dt_ocorrencia,hr_ocorrencia) DESC
                LIMIT 1;

                IF @st_ult_luminosidade = '1' THEN
                    INSERT INTO tb_sumario(id_dispositivo,dt_ocorrencia,hr_ocorrencia,hr_diferenca_luminosidade)
                    VALUES (IDD,DAT,HRO,TIMEDIFF(HRO,@hr_ult_ocorrencia));
                    COMMIT;
                ELSE
                    INSERT INTO tb_sumario(id_dispositivo,dt_ocorrencia,hr_ocorrencia,hr_diferenca_luminosidade)
                    VALUES (IDD,DAT,HRO,TIME(STR_TO_DATE("00:00:00","%H:%i:%s")));
                    COMMIT;
                END IF;
            ELSE
                INSERT INTO tb_sumario(id_dispositivo,dt_ocorrencia,hr_ocorrencia,hr_diferenca_luminosidade)
                VALUES (IDD,DAT,HRO,TIME(STR_TO_DATE("00:00:00","%H:%i:%s")));
                COMMIT;
            END IF;
        END IF;
    END LOOP;
END;//

DELIMITER ;



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
